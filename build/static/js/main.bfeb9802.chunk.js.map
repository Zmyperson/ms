{"version":3,"sources":["components/tab.js","actions/actionCreator.js","actions/actionTypes.js","store/reducer/tabReducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Tab","data","this","props","defaultData","columns","title","dataIndex","key","render","image","react_default","a","createElement","src","alt","text","href","tags","map","tag","es_tag","color","input","placeholder","onChange","handleChange","bind","onKeyDown","table","dataSource","handleGetData","Component","connect","state","dispatch","type","payload","Promise","resolve","axios","method","url","then","dataAction","e","i","bStop","val","target","value","console","log","reg","RegExp","arr","newArr","length","item","test","push","setNewDataAction","defaultState","Store","createStore","arguments","undefined","action","newState","JSON","parse","stringify","apis","applyMiddleware","promiseMiddleware","App","es","store","className","tab","Boolean","window","location","hostname","match","moment","locale","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfeb9802.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Tag, Input } from 'antd';\r\nimport {dataAction,setNewDataAction,setDefauleDataAction} from '../actions/actionCreator'\r\nimport {connect} from 'react-redux'\r\n\r\nclass Tab extends Component {\r\n  render() {\r\n    // console.log(this.props.data)\r\n    const data = this.props.data[0]?this.props.data:[]\r\n    const defaultData = this.props.defaultData[0]?this.props.defaultData:[]\r\n    const columns = [{\r\n      title: '名称',\r\n      dataIndex: 'name',\r\n      key: \"name\"\r\n    }, {\r\n      title: '描述',\r\n      dataIndex: 'description',\r\n      key: \"description\"\r\n\r\n    }, {\r\n      title: '图片',\r\n      dataIndex: 'image',\r\n      key: \"image\",\r\n      render: image => <img src={image} alt='' />,\r\n    },\r\n    {\r\n      title: '地址',\r\n      dataIndex: 'baseURL',\r\n      key: \"baseURL\",\r\n      render: text => <a href={text}>链接</a>,\r\n    }, {\r\n      title: 'tags',\r\n      dataIndex: 'tags',\r\n      key: \"tags\",\r\n      render: tags => (\r\n        <span>\r\n          {tags.map(tag => <Tag color=\"blue\" key={tag}>{tag}</Tag>)}\r\n        </span>\r\n      ),\r\n    }];\r\n    return (\r\n      <div>\r\n        <Input placeholder=\"Basic usage\" onChange={this.props.handleChange.bind(this,defaultData)} onKeyDown={this.props.handleChange.bind(this,defaultData)}/>\r\n        <Table dataSource={data} columns={columns} />\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    // 组件挂载后去请求数据\r\n    this.props.handleGetData()\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data : state.data,\r\n    defaultData : state.defaultData\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    handleGetData () {\r\n        dataAction(dispatch)\r\n    },\r\n    handleChange (defaultData,e) {\r\n        //获取搜索框输入的值\r\n        let val = e.target.value;\r\n        // 当输入框的值不为空或者按下回退键\r\n        if (val!==\"\") {\r\n            console.log(val)\r\n            // 创建正则对象，包含输入的内容，不区分大小写全局检索\r\n            let reg = new RegExp(val, \"ig\");\r\n            let arr = defaultData;\r\n            let newArr = [];\r\n            // 遍历数组\r\n            for (var i = 0; i < arr.length; i++) {\r\n                // 设置标志位\r\n                var bStop = false;\r\n                // 查询数组中每条数据的tags是否包含搜索框输入的内容\r\n                arr[i].tags.map((item) => {\r\n                if (reg.test(item)) {\r\n                    // 包含的话设标志位为true\r\n                    bStop = true;\r\n                    return\r\n                }\r\n                })\r\n                // console.log(bStop)\r\n                if (bStop) {\r\n                // 将标志位为true的即包含搜索框输入的内容的数据存入newArr\r\n                newArr.push(arr[i]);\r\n                }\r\n            }\r\n            // console.log(newArr)\r\n            // 派发action去设置data为newArr\r\n            dispatch(setNewDataAction(newArr))\r\n        } else {\r\n            // 输入为空的时候\r\n            // 派发action设置data为defaultData\r\n            dispatch(setDefauleDataAction())\r\n        }\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Tab);\r\n","import axios from 'axios'\r\nimport { dataType,setNewDataType,setDefauleDataType } from './actionTypes';\r\nexport const dataAction = (dispatch) => {\r\n    dispatch({\r\n        type : dataType,\r\n        payload : new Promise(resolve=>{\r\n            axios({\r\n                method : 'get',\r\n                url :'http://www.mocky.io/v2/5be3ced42f00006d00d9f13b'\r\n            })\r\n            .then((data) => {\r\n                resolve(data)\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nexport const setNewDataAction = (val) => ({\r\n    type : setNewDataType,\r\n    value : val\r\n})\r\n\r\nexport const setDefauleDataAction = () => ({\r\n    type : setDefauleDataType\r\n})","export const dataType = 'AXIOS_DATA'\r\nexport const setNewDataType = 'SET_NEWDATA'\r\nexport const setDefauleDataType = 'SET_DEFAULTDATA'","const defaultState = {\r\n    data : [],\r\n    defaultData : [],\r\n    \r\n}\r\n\r\nexport default (state=defaultState,action) => {\r\n    const newState = JSON.parse(JSON.stringify(state))\r\n    console.log(action)\r\n    switch (action.type) {\r\n        case \"AXIOS_DATA_FULFILLED\" : {\r\n            newState.data = action.payload.data.apis\r\n            newState.defaultData = action.payload.data.apis\r\n            return newState\r\n        }\r\n        case \"SET_NEWDATA\" : {\r\n            newState.data = action.value\r\n            return newState\r\n        }\r\n        case \"SET_DEFAULTDATA\" : {\r\n            newState.data = newState.defaultData\r\n            return newState\r\n        }\r\n        default : return state\r\n    }\r\n}","import {createStore,applyMiddleware} from 'redux'\r\nimport promiseMiddleware from 'redux-promise-middleware'\r\nimport reducer from './reducer/tabReducer'\r\n\r\nconst Store = new createStore(reducer,applyMiddleware(promiseMiddleware()))\r\n\r\nexport default Store","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport Tab from './components/tab'\nimport Store from './store/store'\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={Store}>\n        <div className=\"App\">\n          <Tab></Tab>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"../node_modules/antd/dist/antd.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\"\n\n\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\n\nmoment.locale('zh-cn');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n/*\napp.use(\"/v2\",httpProxyMiddleware({\n    target:\"http://www.mocky.io\",\n    changeOrigin:true\n  }))\n*/\n"],"sourceRoot":""}